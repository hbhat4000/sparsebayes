expression(-0.1870343 + 0.3641979*x - 0.0813058*x^2)
expression(-0.1870343 + 0.3641979*x - 0.0813058*x^2,x=0.3)
eval(-0.1870343 + 0.3641979*x - 0.0813058*x^2)
x=0.3
eval(-0.1870343 + 0.3641979*x - 0.0813058*x^2)
x=0.5
eval(-0.1870343 + 0.3641979*x - 0.0813058*x^2)
frozendrift(c(3,5)) %*% frozencoeff
frozendrift(c(.3,.5)) %*% frozencoeff
source('~/Desktop/nonparametricEM.R')
frozendrift(c(0.3,0.5))
source('~/Desktop/nonparametricEM.R')
frozendrift(c(0.3,0.5))
frozencoeff
5 * 1
5 % 1
5 %% 1
5 %% 2
source('~/Desktop/nonparametricEM.R')
j
traj
source('~/Desktop/nonparametricEM.R')
source('~/Desktop/nonparametricEM.R')
traj
j
numsteps/savesteps
source('~/Desktop/nonparametricEM.R')
source('~/Desktop/nonparametricEM.R')
tvec
traj
? save
source('~/Desktop/nonparametricEM.R')
source('~/Desktop/nonparametricEM.R')
library('sde')
? sde
??sde
d <- expression((3-x))
s <- expression(1.2*sqrt(x))
par(mar=c(3,3,1,1))
par(mfrow=c(2,1))
set.seed(123)
X <- DBridge(x=1.7,y=0.5, delta=0.01, drift=d, sigma=s)
plot(X)
X <- DBridge(x=1,y=5, delta=0.01, drift=d, sigma=s)
plot(X)
d
s
numdof = 3
normalized.p.list = hermite.he.polynomials(n=numdof-1, normalized=TRUE)
polynomial.functions(normalized.p.list)
normalized.p.list
unlist(normalized.p.list)
normalized.p.list
normalized.p.list[[1]]*10 + normalized.p.list[[2]]*(-100)
expression(NULL)
test = expression(NULL)
test = test + normalized.p.list[[1]]*10
class(normalized.p.list[[1]]*10)
test = polynomial(NULL)
test = test + normalized.p.list[[1]]*10
test
test = polynomial(NULL)
test
test = test + normalized.p.list[[1]]*10
test
polynomial(g)
class(g)
class(polynomial(g))
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
driftfn
expression(driftfn)
eval(driftfn)
? expression
as.expression(driftfn)
expression(0.5 - 0.04*x - 0.08*x^2)
driftfn = function(t,x) { 0.5*x^2 }
sigmafn = function(t,x) { 0.125 }
test = DBridge(x=traj[1],y=traj[2],t0=tvec[1],T=tvec[2],delta=h,drift=driftfn,sigma=sigmafn)
driftfn = expression(0.5*x^2)
sigmafn = expression(0.125)
driftfn
sigmafn
test = DBridge(x=traj[1],y=traj[2],t0=tvec[1],T=tvec[2],delta=h,drift=driftfn,sigma=sigmafn)
tvec[2]
tvec[1]
h
test
tvec[2]
tvec[1]
test = DBridge(x=traj[1],y=traj[2],t0=tvec[1],T=tvec[2],delta=h,drift=driftfn,sigma=sigmafn,sigma.x=expression(0))
source('~/Desktop/nonparametricEM.R')
tvec
traj
driftfn
source('~/Desktop/nonparametricEMpart2.R')
driftfn
as.expression(driftfn)
quote(driftfn)
driftfn
parse(driftfn)
deparse(driftfn)
typeof(driftfn)
driftfn
as.expression(driftfn)
as.numeric(driftfn)
as.numeric(driftfn)[1]
as.expression(driftfn)
as.expression(driftfn) %*% expression(1,x,x^2)
as.expression(driftfn) %*% expression(x)
as.expression(driftfn) % expression(x)
as.expression(driftfn) * expression(x)
as.expression(drtifn)
as.expression(driftfn
)
as.expression(driftfn)[1]
as.expression(driftfn)[1] * expression(1)
as.expression(driftfn)[2] * expression(x)
as.expression(driftfn)[2]
as.expression(driftfn)
as.numeric(as.expression(driftfn))
unlist(driftfn)
unlist(as.expression(driftfn))
unlist(as.expression(driftfn))[1]
unlist(as.expression(driftfn))[1] * expression(quote(x))
unlist(as.expression(driftfn))[1] * expression(x)
expression(0.3*x)
expression(0.3*x - 0.7*x)
theta[1]
expression(theta[1]*x)
expression(eval(theta[1])*x)
expression(unquote(theta[1])*x)
expression(quote(theta[1])*x)
expression('theta[1]'*x)
theta
parse("theta[1]*x")
parse(theta[1])
parse(text="theta[1")
parse(text="theta[1]"
)
parse(text="theta[1]")
expression(theta[1])
substitute(expression(theta[1]))
substitute(expression(theta[1]),theta)
substitute(expression(theta[1]),env.profile())
? env.profile
substitute(expression(theta[1]),globalenv())
theta
theta[1]
eval(expression(theta[1]))
eval(expression(theta[1]*x))
bquote(expression(theta[1]*x))
bquote(expression(theta[1]*x),theta)
? bquote
substitute(expression(theta[1]*x),theta)
substitute(expression(theta[1]*x),.GlobalEnv)
substitute(expression(theta*x),.GlobalEnv)
theta=0.3
substitute(expression(theta*x),.GlobalEnv)
substitute(expression(theta*x),list(theta=3))
theta = c(.3,-5,.1)
substitute(expression(theta*x)
)
substitute(expression(theta*x))
substitute(expression(theta[1]*x))
substitute(expression(theta[1]*x),list(theta))
substitute(expression(theta[1]*x),list(theta=theta))
? dBridge
? DBridge
eval(expression(theta[1]*x))
eval(expression(theta[1]*x))
x=3
eval(expression(theta[1]*x))
theta[1]
expression(`theta[1]`*x)
expression(`theta[1]*x)
expression(theta[1]*x)
)
)
substitute(expression(theta[1]*x),list(theta[1]=theta[1])
substitute(expression(theta[1]*x),list(theta[1]=theta[1]))
substitute(expression(theta[1]*x),list(theta[1]=theta[1]))
substitute(expression(theta[1]*x),list(theta=theta))
bquote()substitute(expression(theta[1]*x),list(theta=theta)))
bquote(substitute(expression(theta[1]*x),list(theta=theta)))
bquote(expression(theta[1]*x))
bquote(expression(theta[1]*x),theta)
bquote(expression(theta[1]*x),theta=theta)
bquote(expression(theta[1]*x))
? bquote
parse(driftfn)
parse(text=driftfn)
parse(text=quote(driftfn))
parse(text=str(driftfn)
)
)
str(driftfn)
driftfn
as.string(driftfn)
as.character(driftfn)
parse(as.character(driftfn))
parse(text=as.character(driftfn))
source('~/Desktop/nonparametricEMpart2.R')
tvec[2]
tvec[1]
h
test
source('~/Desktop/nonparametricEM.R')
tvec
traj
source('~/Desktop/nonparametricEM.R')
tvec
traj
frozencoeff
source('~/Desktop/nonparametricEMpart2.R')
tvec[1]
tvec[2]
tvec[2]-1
h
test
attr(test)
attributes(test)
attributes(test)$tsp
test$tsp
test
traj[1]
traj[2]
test
as.numeric(test)
length(test)
source('~/Desktop/nonparametricEMpart2.R')
i
n
completedata
length(completedata)
length(test)
test[-lt]
lt
source('~/Desktop/nonparametricEMpart2.R')
length(completedata)
n
(n-1)*100 + 1
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
si
bign
length(test)
bign-si+1
length(completedata)
plot(completedata)
dt
plot(0:dt:tvec[26],completedata)
0:dt:tvec[26]
tvec
linspace
seq(from=0,to=tvec[26],by=dt)
seq(from=0,to=tvec[26],by=h)
plot(seq(from=0,to=tvec[26],by=h),completedata,type='l')
plot(tvec,traj)
plot(tvec,traj,col='red')
lines(seq(from=0,to=tvec[26],by=h),completedata)
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
normalized.p.list
theta
mydrift <- function(x)
{
polyvals = matrix(nrow=length(x),unlist(polynomial.values(normalized.p.list,x)))
as.numeric(polyvals %*% theta)
}
mydrift(3)
mydrift(c(3.0,4.0))
mypoly <- function(x)
{
matrix(nrow=length(x),unlist(polynomial.values(normalized.p.list,x)))
}
mypoly(3)
mypoly(-3)
mypoly(completedata)
pp = mypoly(completedata)
pp[,1]
pp = mypoly(completedata)
dim(pp)
pp[,1]
pp[,2]
t(pp[,1])
outer(pp[,1],pp[,2])
dim(outer(pp[,1],pp[,2]))
length(pp[,1])
? outer
pp
dim(pp)
t(pp) %*% pp
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
mm
mmat
bign
length(diff(completedata))
pp = mypoly(completedata[-bign])
t(diff(completedata)) %*% pp
source('~/Desktop/nonparametricEMpart2.R')
mmat
rvec
solve(mmat,rvec)
? DBridge
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
theta
frozentheta
source('~/Desktop/nonparametricEMpart2.R')
theta
newtheta
sum(abs(theta-newtheta))
source('~/Desktop/nonparametricEM.R')
frozencoeff
source('~/Desktop/nonparametricEMpart2.R')
source('~/Desktop/nonparametricEMpart2.R')
set.seed(123)
frozencoeff = 2*runif(n=numdof) - 1
frozencoeff = frozencoeff/10
frozencoeff
numiter
source('~/Desktop/nonparametricEMpart2.R')
# sample frozen set of coefficients ~ U(-1,1)
set.seed(123)
frozencoeff = 2*runif(n=numdof) - 1
frozencoeff = frozencoeff/10
frozencoeff
mmat
eigen(mmat)$values
i
myfun <- function(i)
{
as.numeric(DBridge(x=traj[i],y=traj[i+1],t0=0,T=dt,
delta=h,drift=driftfn,sigma=sigmafn,sigma.x=sigmaxfn))
}
myfun(1)
myfun(2)
myfun(3)
myfun(4)
lapply(X=c(1:(n-1)),FUN=myfun)
test=lapply(X=c(1:(n-1)),FUN=myfun)
n
length(test)
test[[1]]
test[[2]]
test[[3]]
test[[4]]
length(unlist(test))
length(test[[1]])
101*c(1:25)
2525-24
101*c(1:24)
test2 = test[-101*c(1:24)]
length(test2)
test2 = unlist(test)[-101*c(1:24)]
length(test2)
completedata = numeric(length=bign)
bign
for (i in c(1:(n-1)))
{
lt = length(test[[i]])
if (i < (n-1))
{
si = (i-1)*(lt-1)+1
ei = i*(lt-1)
completedata[si:ei] = test[[i]][-lt]
}
else
{
si = (i-1)*(lt-1)+1
completedata[si:bign] = test[[i]]
}
}
sum(abs(completedata-test2))
h
n
completedata2 = unlist(test)[-(zoomfac+1)*c(1:(n-2))]
sum(abs(completedata-completedata2))
source('~/Desktop/nonparametricEMpart2par.R')
source('~/Desktop/nonparametricEMpart2par.R')
source('~/Desktop/nonparametricEMpart2par.R')
source('~/Desktop/nonparametricEMpart2par.R')
source('~/Desktop/nonparametricEMpart2par.R')
? mclapply
paste(numiter,theta)
paste(numiter,theta,collapse=TRUE)
paste(numiter,theta)
paste(theta)
print(c(numiter,theta))
paste("theta",c(numiter,theta))
paste("theta",str(c(numiter,theta)))
paste("theta",theta)
paste("theta",theta,collapse=NULL)
paste("theta",theta,collapse=TRUE)
paste("theta",theta,collapse='')
paste("theta",theta,collapse=',')
? paste
paste("theta",paste(theta))
paste("theta",as.character(theta))
print("theta",theta)
print("theta",theta)
print(paste("theta",theta))
print(paste("theta",toString(theta)))
print(paste("numiter",numiter,theta",toString(theta)))
)
""
print(paste("numiter",numiter,"theta",toString(theta)))
set.seed(123)
frozencoeff = 2*runif(n=numdof) - 1
frozencoeff = frozencoeff/10
frozencoeff
normalized.p.list
as.numeric(normalized.p.list)
unlist(normalized.p.list)
unlist(normalized.p.list)[1]
attr(normalized.p.list)
attributes(normalized.p.list)
normalized.p.list[[1]]
source('~/Desktop/nonparametricEM.R')
traj
source('~/Desktop/nonparametricEM.R')
traj
tvec
source('~/Desktop/nonparametricEM.R')
source('~/Desktop/nonparametricEM.R')
traj
frozencoeff
plot(tvec,traj)
source('~/Desktop/nonparametricEM.R')
plot(tvec,traj)
source('~/Desktop/nonparametricEM.R')
plot(tvec,traj)
traj
source('~/Desktop/nonparametricEM.R')
traj
plot(tvec,traj)
source('~/Desktop/nonparametricEM.R')
plot(tvec,traj)
traj
frozendrift(-4)
frozendrift(-11)
frozendrift(-66)
source('~/Desktop/cftrack.R')
truecf
plot(out$w,truecf(out$w))
lines(out$w,out$values,col='red')
source('~/Desktop/cftrack.R')
plot(out$w,truecf(out$w))
lines(out$w,out$values,col='red')
sum(abs(truecf(out$w-out$values)))
sum(abs(truecf(out$w)-out$values)))
sum(abs(truecf(out$w)-out$values))
mean(abs(truecf(out$w)-out$values))
source('~/Desktop/cftrack.R')
mean(abs(truecf(out$w)-out$values))
source('~/Desktop/cftrack.R')
mean(abs(truecf(out$w)-out$values))
source('~/Desktop/cftrack.R')
mean(abs(truecf(out$w)-out$values))
plot(kmat %&% initcf)
plot(kmat %*% initcf)
plot(out$w,Re(kmat %*% initcf))
plot(out$w,Re(kmat %*% kmat %*% initcf))
plot(out$w,Re(kmat %*% kmat %*% kmat %*% initcf))
? fourierin
sgrid[255]
sgrid[1]
sgrid[50]
sgrid[125]
sgrid[275]
sgrid[285]
sgrid[284]
sgrid[283]
sgrid[282]
length(sgrid)
source('~/Desktop/cftrack.R')
source('~/Desktop/cftrack.R')
sgrid[200]
sgrid[300]
sgrid[275]
sgrid[290]
sgrid[285]
sgrid[284]
sgrid[283]
sgrid[282]
sgrid[283]
kmat[283,283]
source('~/Desktop/cftrack.R')
kmat[283,283]
source('~/Desktop/cftrack.R')
kmat[283,283]
source('~/Desktop/cftrack.R')
sgrid[560]
sgrid[570]
sgrid[565]
sgrid[564]
kmat[564,564]
setwd('~/Documents/sparsebayes/bcr/')
source('BayesPen.R')
source('~/Documents/sparsebayes/bcr/example1.R')
install.packages('BLR')
install.packages('lars')
source('~/Documents/sparsebayes/bcr/example1.R')
install.packages('SuppDists')
